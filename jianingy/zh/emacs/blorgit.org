#+TITLE: blorgit
#+AUTHOR: Jianing YANG
#+EMAIL: jianingy.yang@gmail.com
#+OPTIONS: toc:t ^:nil
#+LANGUAGE: zh

* 简介

[[orgmode.org/worg/blorgit.html][blorgit]]按照我的理解是一个org-mode发布系统。这个工具切入点非常有意思。他
本身并不直接解析org-mode文件，而是利用UNIX域通过一个在后台运行的Emacs进
程来把org-mode输出为HTML文档。同时blorgit很好的对这些文档进行了组织。

* 如何安装blorgit
** 安装Ruby以及相关模块

Blorgit是一个基于Sinatra框架的Ruby程序，安装之前首先要确保Ruby环境正确。

*** 安装Ruby

根据你的Linux发行版选择相应的Ruby安装方式。详情可参考[[http://www.ruby-lang.org][Ruby]]官方网站

*** 安装相关模块

#+begin_src sh
sudo gem install rake sinatra haml activesupport sass
#+end_src

*** 安装Blorgit

需要从开发者eschulte的github仓库先把代码克隆出来

#+begin_src sh
git clone git://github.com/eschulte/blorgit.git
#+end_src

然后再clone两个相关的子模块

#+begin_src sh
cd blorgit
git submodule init
git submodule update
#+end_src

** 初始化Blog

#+begin_src sh
rake -I . new
rake -I . themes:default
#+end_src

默认情况下Blog会被创建在 =~/blog= 下面。如果需要修改路径，可以编辑blorgit.yml这个文件

** 启动服务

首先需要在Emacs里面加载一个blorgit的模块，
#+begin_example
M-x load-file /path/to/blorgit/backend/acts_as_org/elisp/org-interaction.el
#+end_example

然后启动Web服务器

#+begin_src sh
ruby -I . blorgit.rb
#+end_src

* 一些使用上的小技巧

为了便于维护，我在部署Blorgit的时候用了下面几个技巧

** 单独运行一个Emacs服务器

为了避免干扰保持清新，我单独跑了一个emacs服务器进程。这个进程只会加载生
成org-mode文件相关的el插件。

*** 启动脚本init.el
#+begin_src emacs-lisp
(add-to-list 'load-path "/opt/blorgit/site-lisp/org-7.7/lisp")
(require 'org)
(load-file "/opt/blorgit/blorgit/backend/acts_as_org/elisp/org-interaction.el")
(setq org-export-creator-info t)
#+end_src

** 通过daemontools启动blorgit
[[http://cr.yp.to/daemontools.html][daemontools]] 是一个用来管理后台进程的工具。可以确保进程在崩溃后自动重启。

*** 配置文件
/service/blorgit/run
#+begin_src sh
#!/bin/bash
export PATH=/opt/blorgit/ruby/bin:/opt/blorgit/emacs/bin:$PATH
export LANG=zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8
cd /opt/blorgit/blorgit
exec 2>&1
exec setuidgid apache ruby -I . blorgit.rb -p 4567
#+end_src

** 协作方式

Blorgit的展现功能确实不错，不过目前对于多人编辑的支持还不是很好。考虑到
使用Org-mode的人多半都是直接在Emacs下编辑文件的，基本不会使用Web编辑器。
我把相关的org-mode文件都放在一个Mercurial仓库里。当有人向仓库提交修改时
会自动触发Mercurial的更新脚本来完成内容的更新。

** 语法加亮

由于 org-html-export 采用 Emacs 的主题配置来进行语法加亮，大多数情况下
这个配色方案和网页的配色并不协调。这时可以通过禁止内联(inline) CSS 而采
用外部CSS文件来把颜色配置放到外部控制。禁止内联CSS方法是

#+begin_src emacs-lisp
(setq org-export-htmlize-output-type 'css)
#+end_src

采用外部 CSS 文件后，语法加亮会使用 class 属性而非 style 属性，例如：
#+begin_src html
<pre class="src src-sh"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span>
<span class="org-builtin">export</span> <span class="org-variable-name">PATH</span>=/opt/blorgit/ruby/bin:/opt/blorgit/emacs/bin:$<span class="org-variable-name">PATH</span>
<span class="org-builtin">export</span> <span class="org-variable-name">LANG</span>=zh_CN.UTF-8
<span class="org-builtin">export</span> <span class="org-variable-name">LC_ALL</span>=zh_CN.UTF-8
<span class="org-builtin">cd</span> /opt/blorgit/blorgit
<span class="org-keyword">exec</span> 2&gt;&amp;1
<span class="org-keyword">exec</span> setuidgid apache ruby -I . blorgit.rb -p 4567</pre>
#+end_src

另外，通过 Emacs 的 =org-export-htmlize-generate-css= 函数，可以基于当
前主题生成一个 CSS 文件。我们可以用这个 CSS 文件做基础再进一步做修改。
